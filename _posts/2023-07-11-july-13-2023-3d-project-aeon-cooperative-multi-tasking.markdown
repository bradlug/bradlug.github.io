---
author: John
date: 2023-07-13 21:59:36+00:00
excerpt: '<p><strong>David</strong> had purchased a number of upgrades for his 3D printer: a new motherboard, an extruder which can cope with higher temperatures, a new display and a filament runout sensor. He commented that he had lots of wiring to do to add these upgrades!</p><p><strong>John</strong> briefly summarised a <a href="https://www.youtube.com/watch?v=lKYLF1tA4Ik" type="text/html" role="link">presentation</a> about SUSE’s Aeon:</p>'
layout: post
title: 'July 11 2023 3D printer, Aeon, cooperative multi-tasking'
categories:
- Past Meetings
---

<p><strong>David</strong> had purchased a number of upgrades for his 3D printer: a new motherboard, an extruder which can cope with higher temperatures, a new display and a filament runout sensor. He commented that he had lots of wiring to do to add these upgrades!</p><p><strong>John</strong> briefly summarised a <a href="https://www.youtube.com/watch?v=lKYLF1tA4Ik" type="text/html" role="link">presentation</a> about SUSE’s Aeon:</p><figure><img src="http://www.bradlug.co.uk/blog/2023/07/11/images/Aeon_400px.png" alt="" role="img"></figure><p>SUSE has always been a commercial organisation and it was one of their engineers who, as a Linux maintainer, started the LTS kernels because they needed them for their customers. They went into containers and then decided to develop a server in a container, using <a href="https://podman.io/" type="text/html" role="link">Podman</a> rather than Docker. This is available as <a href="https://en.opensuse.org/Portal:MicroOS" type="text/html" role="link">MicroOS</a>. Aeon is an attempt to develop a desktop on the same principles using <a href="https://www.gnome.org/" type="text/html" role="link">Gnome</a> because this is the desktop SUSE uses for its commercial offerings.</p><p>At the bottom of the stack is the basic Linux system together with the software needed to run Gnome in a container. Graphical applications will come from <a href="https://flatpak.org/" type="text/html" role="link">Flatpak</a> — Flatpaks run in a container — while the distrobox will allow users to run any other program, including graphical applications not available from Flatpack, from the command line. Distrobox is a sandboxed container and so will be able to run programs which are not supported by openSUSE/SUSE without interfering with the rest of the system.</p><p><strong>David</strong> queried how it would handle security updates and John [wrongly] said by installing a new container and David wondered how many times that would happen. [John checked this later and found that security updates rely on a feature of <a href="https://en.wikipedia.org/wiki/Btrfs" type="text/html" role="link">Btrfs</a> which allows transactional updates without interfering with the running of the system.]</p><p>David wondered if openSUSE would go the direction of <a href="https://ubuntu.com/" type="text/html" role="link">Ubuntu</a> and <a href="https://snapcraft.io/" type="text/html" role="link">Snap</a>?</p><p>John said that, whatever happened, <a href="https://get.opensuse.org/tumbleweed/" type="text/html" role="link">Tumbleweed</a>, openSUSE’s rolling distro, would not be affected and nothing will change until 2025 at the earliest.</p><p><strong>Bernard</strong> had previously mentioned the <a href="http://www.indilib.org/api/index.html" type="text/html" role="link">Instrument Neutral Distributed Interface (INDI)</a> server which can control the properties of instruments by sending an XML specification to a general purpose client so that it can pick up how to display things. However, everything is written in C and so development is limited to a small community.</p><p>If drivers could be written more easily, INDI could be used, for example, on Raspberry Pis if someone could write a driver using Python functions and convert that to an XML file.</p><p>The problem is that you need to do a lot and to do it simultaneously when there are multiple drivers and multiple clients; the difficulty lies doing things simultaneously — individual tasks are straightforward unlike simultaneous ones.</p><p>In Python you can use forks, but these are just duplicates, and threads, but these cannot handle a change in a variable.</p><p>So he has been exploring cooperative multi-tasking in Python; normally you define functions that do things and have a main that calls the other functions all sequentially.</p><p>Co-routines are functions which can pause, pass control back and resume; so in Python you can run an event loop which runs round running, pausing and resuming which appears to be simultaneous; the only problem is if a program carries on running and stops the others running.</p><p>You import the <a href="https://docs.python.org/3/library/asyncio.html" type="text/html" role="link">asyncio</a> library; as each function is run, it may call other functions and put them on the loop.</p><p>The problem is passing data from one function to another; however, the <code>asyncio</code> library has queues which allows data to be added when there is space on the queues — if there is no data in the queue, the loop carries on running.</p><p>He then demonstrated running two routines involving ‘Hello world’ (based on the example on the <a href="https://docs.python.org/3/library/asyncio.html" type="text/html" role="link">asyncio</a> page) which each have a 2s wait; consecutively, they take 4s. As co-routines they take 2s; using <code>asyncio.gather()</code> you get the same result when the queue is limited to one item because routine A can only put one item in the queue and must await routine B getting the first item from the queue after which routine B awaits routine A putting another item in the queue. If you remove the 2s wait from the routines, they appear to run simultaneously.</p><p>He has also started exploring an INDI driver for a thermostat.</p><p><strong>David</strong> queried the relevance of cooperative multi-tasking when the OS has pre-emptive multi-tasking to which Bernard responded that the Python community is adopting it along with <a href="https://en.wikipedia.org/wiki/JavaScript" type="text/html" role="link">Javascript</a> and <a href="https://www.rust-lang.org/" type="text/html" role="link">Rust</a>. He could not defend it but found it interesting.</p>
